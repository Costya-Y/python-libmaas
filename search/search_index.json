{
    "docs": [
        {
            "location": "/index.html",
            "text": "Welcome to MAAS's new command-line tool & Python client library\n\n\n\npython-libmaas\n provides:\n\n\n\n\n\n\nA command-line tool for working with MAAS servers.\n\n\n\n\n\n\nA rich and stable Python client library for interacting with MAAS 2.0+\n  servers. This can be used in a synchronous/blocking mode, or an\n  asynchronous/non-blocking mode based on \nasyncio\n.\n\n\n\n\n\n\nA lower-level Python client library, auto-generated to match the MAAS\n  server it\u2019s interacting with.\n\n\n\n\n\n\nFor MAAS \nserver\n documentation, visit\n\ndocs.ubuntu.com\n.\n\n\n\n\nThis is \nALPHA\n software. We are converging on a finished product, but\nuntil we release a beta all APIs could change.\n\n\n\n\nInstallation\n\n\nEither work from a branch:\n\n\n$ git clone https://github.com/maas/python-libmaas.git\n$ cd python-libmaas\n$ make\n\n\n\n\nOr install with \npip\n into a\n\nvirtualenv\n:\n\n\n$ virtualenv --python=python3 amc && source amc/bin/activate\n$ pip install git+https://github.com/maas/python-libmaas.git\n\n\n\n\nOr install from \nPyPI\n:\n\n\n$ virtualenv --python=python3 amc && source amc/bin/activate\n$ pip install python-libmaas\n\n\n\n\nNote\n that PyPI may lag the others.\n\n\nThis documentation assumes you\u2019re working from a branch or in a\nvirtualenv. In practice this means it will use partially qualified paths\nlike \nbin/maas\n instead of bare \nmaas\n invocations. If you\u2019ve\ninstalled from PyPI the \nmaas\n command will probably be installed on\nyour shell\u2019s \nPATH\n so you can invoke it as \nmaas\n.\n\n\nCommand-line\n\n\nBest place to start with the CLI is the help menu.\n\n\n$ bin/maas help\n$ bin/maas help commands\n\n\n\n\nOnce your have familiarized yourself with the available commands you will\nwant to login to your MAAS. You can either pass arguments to login or it\nwill ask your for the needed information to login.\n\n\n$ bin/maas login\n\n\n\n\nThe CLI supports multiple profiles with \nlogin\n. Use \nprofiles\n and\n\nswitch\n to view and change between profiles.\n\n\n$ bin/maas profiles\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Profile \u2502 URL                                 \u2502 Active \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 admin   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502 \u2713      \u2502\n\u2502 other   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas switch other\n$ bin/maas profiles\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Profile \u2502 URL                                 \u2502 Active \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 admin   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502        \u2502\n\u2502 other   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502 \u2713      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\nThe \nnodes\n, \nmachines\n, \ndevices\n, and \ncontrollers\n provide access\nto either all nodes with \nnodes\n or specific node types with \nmachines\n,\n\ndevices\n, and \ncontrollers\n.\n\n\n$ bin/maas nodes\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname           \u2502 Type          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 another            \u2502 Device        \u2502\n\u2502 blake-ubnt-desktop \u2502 Regiond+rackd \u2502\n\u2502 testing            \u2502 Device        \u2502\n\u2502 win2016            \u2502 Machine       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas machines\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname \u2502 Power \u2502 Status \u2502 Arch  \u2502 #CPUs \u2502 RAM    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 win2016  \u2502 Off   \u2502 Broken \u2502 amd64 \u2502 4     \u2502 8.0 GB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas devices\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname \u2502 IP addresses  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 another  \u2502 192.168.1.223 \u2502\n\u2502 testing  \u2502 192.168.1.150 \u2502\n\u2502          \u2502 192.168.1.143 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas controllers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname           \u2502 Type          \u2502 Arch  \u2502 #CPUs \u2502 RAM     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 blake-ubnt-desktop \u2502 Regiond+rackd \u2502 amd64 \u2502 8     \u2502 24.0 GB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\nTab-completion in \nbash\n and \ntcsh\n is supported too. For example,\nin \nbash\n:\n\n\n$ source <(bin/register-python-argcomplete --shell=bash bin/maas)\n$ bin/maas <tab>\nallocate  files  login  nodes  shell  ...\n\n\n\n\nClient library\n\n\nFor a developer the simplest entry points into \npython-libmaas\n are\nthe \nconnect\n and \nlogin\n functions in \nmaas.client\n. The former\nconnects to a MAAS server using a previously obtained API key, and the\nlatter logs-in to MAAS with your username and password. These returns a\n\nClient\n object that has convenient attributes for working with MAAS.\n\n\nFor example, this prints out all interfaces on all machines:\n\n\nfrom maas.client import login\nclient = login(\n    \"http://localhost:5240/MAAS/\",\n    username=\"my_user\", password=\"my_pass\",\n)\ntmpl = \"{0.hostname} {1.name} {1.mac_address}\"\nfor machine in client.machines.list():\n    for interface in machine.interfaces:\n        print(tmpl.format(machine, interface))\n\n\n\n\nLearn more about the \nclient\n.\n\n\nShell\n\n\nThere\u2019s an interactive shell. If a profile name is given or a default\nprofile has been set \u2014 see \nmaas profiles --help\n \u2014 this places a\n\nClient\n instance in the default namespace (as \nclient\n) that you\ncan use interactively or in a script.\n\n\nFor the best experience install \nIPython\n first.\n\n\n$ bin/maas shell\nWelcome to the MAAS shell.\n...\n\n\n\n\n>>> origin.Version.read()\n<Version 2.2.0 beta2+bzr5717 [bridging-automatic-ubuntu ...]>\n>>> dir(client)\n[..., 'account', 'boot_resources', ...]\n\n\n\n\nScripts can also be run. For example, given the following \nscript.py\n:\n\n\nprint(\"Machines:\", len(client.machines.list()))\nprint(\"Devices:\", len(client.devices.list()))\nprint(\"Racks:\", len(client.rack_controllers.list()))\nprint(\"Regions:\", len(client.region_controllers.list()))\n\n\n\n\nthe following will run it against the default profile:\n\n\n$ bin/maas shell script.py\nMachines: 1\nDevices: 0\nRacks: 2\nRegions: 1\n\n\n\n\nDevelopment\n\n\nIt\u2019s easy to start hacking on \npython-libmaas\n:\n\n\n$ git clone git@github.com:maas/python-libmaas.git\n$ cd python-libmaas\n$ make develop\n$ make test\n\n\n\n\nInstalling \nIPython\n is generally a good idea too:\n\n\n$ bin/pip install -UI IPython\n\n\n\n\nPull requests are welcome but authors need to sign the \nCanonical\ncontributor license agreement\n before those PRs can be merged.",
            "title": "Home"
        },
        {
            "location": "/index.html#installation",
            "text": "Either work from a branch:  $ git clone https://github.com/maas/python-libmaas.git\n$ cd python-libmaas\n$ make  Or install with  pip  into a virtualenv :  $ virtualenv --python=python3 amc && source amc/bin/activate\n$ pip install git+https://github.com/maas/python-libmaas.git  Or install from  PyPI :  $ virtualenv --python=python3 amc && source amc/bin/activate\n$ pip install python-libmaas  Note  that PyPI may lag the others.  This documentation assumes you\u2019re working from a branch or in a\nvirtualenv. In practice this means it will use partially qualified paths\nlike  bin/maas  instead of bare  maas  invocations. If you\u2019ve\ninstalled from PyPI the  maas  command will probably be installed on\nyour shell\u2019s  PATH  so you can invoke it as  maas .",
            "title": "Installation"
        },
        {
            "location": "/index.html#command-line",
            "text": "Best place to start with the CLI is the help menu.  $ bin/maas help\n$ bin/maas help commands  Once your have familiarized yourself with the available commands you will\nwant to login to your MAAS. You can either pass arguments to login or it\nwill ask your for the needed information to login.  $ bin/maas login  The CLI supports multiple profiles with  login . Use  profiles  and switch  to view and change between profiles.  $ bin/maas profiles\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Profile \u2502 URL                                 \u2502 Active \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 admin   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502 \u2713      \u2502\n\u2502 other   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas switch other\n$ bin/maas profiles\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Profile \u2502 URL                                 \u2502 Active \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 admin   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502        \u2502\n\u2502 other   \u2502 http://localhost:5240/MAAS/api/2.0/ \u2502 \u2713      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  The  nodes ,  machines ,  devices , and  controllers  provide access\nto either all nodes with  nodes  or specific node types with  machines , devices , and  controllers .  $ bin/maas nodes\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname           \u2502 Type          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 another            \u2502 Device        \u2502\n\u2502 blake-ubnt-desktop \u2502 Regiond+rackd \u2502\n\u2502 testing            \u2502 Device        \u2502\n\u2502 win2016            \u2502 Machine       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas machines\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname \u2502 Power \u2502 Status \u2502 Arch  \u2502 #CPUs \u2502 RAM    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 win2016  \u2502 Off   \u2502 Broken \u2502 amd64 \u2502 4     \u2502 8.0 GB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas devices\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname \u2502 IP addresses  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 another  \u2502 192.168.1.223 \u2502\n\u2502 testing  \u2502 192.168.1.150 \u2502\n\u2502          \u2502 192.168.1.143 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n$ bin/maas controllers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname           \u2502 Type          \u2502 Arch  \u2502 #CPUs \u2502 RAM     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 blake-ubnt-desktop \u2502 Regiond+rackd \u2502 amd64 \u2502 8     \u2502 24.0 GB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Tab-completion in  bash  and  tcsh  is supported too. For example,\nin  bash :  $ source <(bin/register-python-argcomplete --shell=bash bin/maas)\n$ bin/maas <tab>\nallocate  files  login  nodes  shell  ...",
            "title": "Command-line"
        },
        {
            "location": "/index.html#client-library",
            "text": "For a developer the simplest entry points into  python-libmaas  are\nthe  connect  and  login  functions in  maas.client . The former\nconnects to a MAAS server using a previously obtained API key, and the\nlatter logs-in to MAAS with your username and password. These returns a Client  object that has convenient attributes for working with MAAS.  For example, this prints out all interfaces on all machines:  from maas.client import login\nclient = login(\n    \"http://localhost:5240/MAAS/\",\n    username=\"my_user\", password=\"my_pass\",\n)\ntmpl = \"{0.hostname} {1.name} {1.mac_address}\"\nfor machine in client.machines.list():\n    for interface in machine.interfaces:\n        print(tmpl.format(machine, interface))  Learn more about the  client .",
            "title": "Client library"
        },
        {
            "location": "/index.html#shell",
            "text": "There\u2019s an interactive shell. If a profile name is given or a default\nprofile has been set \u2014 see  maas profiles --help  \u2014 this places a Client  instance in the default namespace (as  client ) that you\ncan use interactively or in a script.  For the best experience install  IPython  first.  $ bin/maas shell\nWelcome to the MAAS shell.\n...  >>> origin.Version.read()\n<Version 2.2.0 beta2+bzr5717 [bridging-automatic-ubuntu ...]>\n>>> dir(client)\n[..., 'account', 'boot_resources', ...]  Scripts can also be run. For example, given the following  script.py :  print(\"Machines:\", len(client.machines.list()))\nprint(\"Devices:\", len(client.devices.list()))\nprint(\"Racks:\", len(client.rack_controllers.list()))\nprint(\"Regions:\", len(client.region_controllers.list()))  the following will run it against the default profile:  $ bin/maas shell script.py\nMachines: 1\nDevices: 0\nRacks: 2\nRegions: 1",
            "title": "Shell"
        },
        {
            "location": "/index.html#development",
            "text": "It\u2019s easy to start hacking on  python-libmaas :  $ git clone git@github.com:maas/python-libmaas.git\n$ cd python-libmaas\n$ make develop\n$ make test  Installing  IPython  is generally a good idea too:  $ bin/pip install -UI IPython  Pull requests are welcome but authors need to sign the  Canonical\ncontributor license agreement  before those PRs can be merged.",
            "title": "Development"
        },
        {
            "location": "/client/index.html",
            "text": "The Web API client\n\n\n\nCalling \nmaas.client.connect\n or \nmaas.client.login\n (MAAS 2.2+\nonly) will return a \nmaas.client.facade.Client\n instance. This\nprovides an easy to understand starting point for working with MAAS\u2019s\nWeb API.\n\n\nAn example\n\n\n#!/usr/bin/env python3.6\n\nfrom maas.client import connect\n\n# Replace \u2026 with an API key previously obtained by hand from\n# http://$host:$port/MAAS/account/prefs/.\nclient = maas.client.connect(\n    \"http://localhost:5240/MAAS/\", apikey=\"\u2026\")\n\n# Get a reference to self.\nmyself = client.users.whoami()\nassert myself.is_admin, \"%s is not an admin\" % myself.username\n\n# Check for a MAAS server capability.\nversion = client.version.get()\nassert \"devices-management\" in version.capabilities\n\n# Check the default OS and distro series for deployments.\nprint(client.maas.get_default_os())\nprint(client.maas.get_default_distro_series())\n\n# Set the HTTP proxy.\nclient.maas.set_http_proxy(\"http://localhost:3128\")\n\n# Allocate and deploy a machine.\nmachine = client.machines.allocate()\nmachine.deploy()\n\n\n\n\nUsing \nlogin\n\n\nAlternatively, a client can be obtained from a username and password,\nreplacing the call to \nconnect\n above. This only works in MAAS 2.2 and\nabove; below that a \nLoginNotSupported\n exception will be raised.\n\n\nclient = login(\n    \"http://localhost:5240/MAAS/\",\n    username=\"foo\", password=\"bar\",\n)\n\n\n\n\nAgain, but asynchronous\n\n\nAt first glance \npython-libmaas\n appears to be a blocking API, but it\u2019s\nactually asynchronous under the skin, based on \nasyncio\n. If you call\ninto \npython-libmaas\n from within a running event loop it will behave\nasynchronously, but called from outside it behaves synchronously, and\nblocks.\n\n\nUsing \npython-libmaas\n interactively, when exploring the library or\ntrying something out, is familiar and natural because it behaves as a\nsynchronous, blocking API. This mode can be used of in scripts too, but\nthe same code can be easily repurposed for use in an asynchronous,\nnon-blocking application.\n\n\nBelow shows the earlier example but implemented in an asynchronous\nstyle. Note the use of the \nasynchronous\n decorator: this is used\nheavily in \npython-libmaas\n \u2014 along with the \nAsynchronous\n metaclass\n\u2014 to create the automatic blocking/not-blocking behaviour.\n\n\n#!/usr/bin/env python3.6\n\nfrom maas.client import login\nfrom maas.client.utils.async import asynchronous\n\n@asynchronous\nasync def work_with_maas():\n    client = await login(\n        \"http://eucula.local:5240/MAAS/\",\n        username=\"gavin\", password=\"f00b4r\")\n\n    # Get a reference to self.\n    myself = await client.users.whoami()\n    assert myself.is_admin, \"%s is not an admin\" % myself.username\n\n    # Check for a MAAS server capability.\n    version = await client.version.get()\n    assert \"devices-management\" in version.capabilities\n\n    # Check the default OS and distro series for deployments.\n    print(await client.maas.get_default_os())\n    print(await client.maas.get_default_distro_series())\n\n    # Set the HTTP proxy.\n    await client.maas.set_http_proxy(\"http://localhost:3128\")\n\n    # Allocate and deploy a machine.\n    machine = await client.machines.allocate()\n    await machine.deploy()\n\nwork_with_maas()",
            "title": "Introduction"
        },
        {
            "location": "/client/index.html#an-example",
            "text": "#!/usr/bin/env python3.6\n\nfrom maas.client import connect\n\n# Replace \u2026 with an API key previously obtained by hand from\n# http://$host:$port/MAAS/account/prefs/.\nclient = maas.client.connect(\n    \"http://localhost:5240/MAAS/\", apikey=\"\u2026\")\n\n# Get a reference to self.\nmyself = client.users.whoami()\nassert myself.is_admin, \"%s is not an admin\" % myself.username\n\n# Check for a MAAS server capability.\nversion = client.version.get()\nassert \"devices-management\" in version.capabilities\n\n# Check the default OS and distro series for deployments.\nprint(client.maas.get_default_os())\nprint(client.maas.get_default_distro_series())\n\n# Set the HTTP proxy.\nclient.maas.set_http_proxy(\"http://localhost:3128\")\n\n# Allocate and deploy a machine.\nmachine = client.machines.allocate()\nmachine.deploy()",
            "title": "An example"
        },
        {
            "location": "/client/index.html#using-login",
            "text": "Alternatively, a client can be obtained from a username and password,\nreplacing the call to  connect  above. This only works in MAAS 2.2 and\nabove; below that a  LoginNotSupported  exception will be raised.  client = login(\n    \"http://localhost:5240/MAAS/\",\n    username=\"foo\", password=\"bar\",\n)",
            "title": "Using login"
        },
        {
            "location": "/client/index.html#again-but-asynchronous",
            "text": "At first glance  python-libmaas  appears to be a blocking API, but it\u2019s\nactually asynchronous under the skin, based on  asyncio . If you call\ninto  python-libmaas  from within a running event loop it will behave\nasynchronously, but called from outside it behaves synchronously, and\nblocks.  Using  python-libmaas  interactively, when exploring the library or\ntrying something out, is familiar and natural because it behaves as a\nsynchronous, blocking API. This mode can be used of in scripts too, but\nthe same code can be easily repurposed for use in an asynchronous,\nnon-blocking application.  Below shows the earlier example but implemented in an asynchronous\nstyle. Note the use of the  asynchronous  decorator: this is used\nheavily in  python-libmaas  \u2014 along with the  Asynchronous  metaclass\n\u2014 to create the automatic blocking/not-blocking behaviour.  #!/usr/bin/env python3.6\n\nfrom maas.client import login\nfrom maas.client.utils.async import asynchronous\n\n@asynchronous\nasync def work_with_maas():\n    client = await login(\n        \"http://eucula.local:5240/MAAS/\",\n        username=\"gavin\", password=\"f00b4r\")\n\n    # Get a reference to self.\n    myself = await client.users.whoami()\n    assert myself.is_admin, \"%s is not an admin\" % myself.username\n\n    # Check for a MAAS server capability.\n    version = await client.version.get()\n    assert \"devices-management\" in version.capabilities\n\n    # Check the default OS and distro series for deployments.\n    print(await client.maas.get_default_os())\n    print(await client.maas.get_default_distro_series())\n\n    # Set the HTTP proxy.\n    await client.maas.set_http_proxy(\"http://localhost:3128\")\n\n    # Allocate and deploy a machine.\n    machine = await client.machines.allocate()\n    await machine.deploy()\n\nwork_with_maas()",
            "title": "Again, but asynchronous"
        },
        {
            "location": "/client/nodes/index.html",
            "text": "Machines, devices, racks, and regions\n\n\n\nGiven a \nClient\n instance bound to your MAAS server, you can\ninterrogate your nodes.\n\n\nRead nodes\n\n\nEach node type exists on the client: \nmachines\n, \ndevices\n,\n\nrack_controllers\n, \nregion_controllers\n.\n\n\n>>> client.machines.list()\n<Machines length=1 items=[<Machine hostname='wanted-falcon' system_id='ekgqwd'>]>\n>>> client.devices.list()\n<Devices length=0 items=[]>\n>>> client.rack_controllers.list()\n<RackControllers length=1 items=[<RackController hostname='maas-ctrl' system_id='efw3c4'>]>\n>>> client.region_controllers.list()\n<RegionControllers length=1 items=[<RegionController hostname='maas-ctrl' system_id='efw3c4'>]>\n\n\n\n\nEasily iterate through the machines.\n\n\n>>> for machine in client.machines.list():\n...     print(repr(machine))\n<Machine hostname='botswana' system_id='pncys4'>\n\n\n\n\nGet a machine from its system_id.\n\n\n>>> machine = client.machines.get(system_id=\"pncys4\")\n>>> machine\n<Machine hostname='botswana' system_id='pncys4'>\n\n\n\n\nMachines \u2014 and devices, racks, and regions \u2014 have many useful\nattributes:\n\n\n>>> machine.architecture\n'amd64/generic'\n>>> machine.cpus\n4\n\n\n\n\nDon\u2019t forget to try using tab-completion \u2014 the objects have been\ndesigned to be particularly friendly for interactive use \u2014 or\n\ndir(machine)\n to find out what other fields and methods are\navailable.\n\n\nCreate nodes\n\n\nCreate a machine in MAAS. The architecture, MAC addresses, and power type are\nrequired fields.\n\n\n>>> machine = client.machines.create(\n...     \"amd64\", [\"00:11:22:33:44:55\", \"AA:BB:CC:DD:EE:FF\"], \"manual\")\n<Machine hostname='wanted-falcon' system_id='ekgqwd'>\n\n\n\n\nNormally you need to pass in power parameter so MAAS can talk to the BMC.\n\n\n>>> machine = client.machines.create(\n...     \"amd64\", [\"00:11:22:33:44:55\", \"AA:BB:CC:DD:EE:FF\"], \"ipmi\", {\n...         \"power_address\": \"10.245.0.10\",\n...         \"power_user\": \"root\",\n...         \"power_pass\": \"calvin\",\n...     })\n>>> machine\n<Machine hostname='wanted-falcon' system_id='ekgqwd'>\n>>> machine.status\n<NodeStatus.COMMISSIONING: 1>\n\n\n\n\nUpdating nodes\n\n\nUpdating a machine is as simple as modifying the attribute and saving.\n\n\n>>> machine.hostname = 'my-machine'\n>>> machine.architecture = 'i386/generic'\n>>> machine.save()\n\n\n\n\nDeleting nodes\n\n\nDelete a machine is simple as calling delete on the machine object.\n\n\n>>> machine.delete()\n\n\n\n\nCommissioning and testing\n\n\nEasily commission a machine and wait until it successfully completes. By\ndefault the \ncommission\n method waits until commissioning succeeds.\n\n\n>>> machine.commission()\n>>> machine.status\nNodeStatus.READY\n\n\n\n\nA more advanced asyncio based script that runs commissioning with extra scripts\nand waits until all machines have successfully commissioned.\n\n\n#!/usr/bin/env python3\n\nimport asyncio\n\nfrom maas.client import login\nfrom maas.client.enum import NodeStatus\nfrom maas.client.utils.async import asynchronous\n\n\n@asynchronous\nasync def commission_all_machines():\n    client = await login(\n        \"http://eucula.local:5240/MAAS/\",\n        username=\"gavin\", password=\"f00b4r\")\n\n    # Get all machines that are in the NEW status.\n    all_machines = await client.machines.list()\n    new_machines = [\n        machine\n        for machine in all_machines\n        if machine.status == NodeStatus.NEW\n    ]\n\n    # Run commissioning with a custom commissioning script on all new machines.\n    for machine in new_machines:\n        machine.commission(\n            commissioning_scripts=['clear_hardware_raid'], wait=False)\n\n    # Wait until all machines are ready.\n    failed_machines = []\n    completed_machines = []\n    while len(new_machines) > 0:\n        await asyncio.sleep(5)\n        for machine in list(new_machines):\n            await machine.refresh()\n            if machine.status in [\n                    NodeStatus.COMMISSIONING, NodeStatus.TESTING]:\n                # Machine is still commissioning or testing.\n                continue\n            elif machine.status == NodeStatus.READY:\n                # Machine is complete.\n                completed_machines.append(machine)\n                new_machines.remove(machine)\n            else:\n                # Machine has failed commissioning.\n                failed_machines.append(machine)\n                new_machines.remove(machine)\n\n    # Print message if any machines failed to commission.\n    if len(failed_machines) > 0:\n        for machine in failed_machines:\n            print(\"%s: transitioned to unexpected status - %s\" % (\n                machine.hostname, machine.status_name))\n    else:\n        print(\"Successfully commissioned %d machines.\" % len(\n            completed_machines))\n\n\ncommission_all_machines()\n\n\n\n\nAllocating and deploying\n\n\n>>> help(client.machines.allocate)\nHelp on method allocate in module maas.client.viscera.machines:\n\nallocate(\n    *, hostname:str=None, architecture:str=None, cpus:int=None,\n    memory:float=None, tags:typing.Sequence=None)\n  method of maas.client.viscera.machines.MachinesType instance\n    Allocate a machine.\n\n    :param hostname: The hostname to match.\n    :param architecture: The architecture to match, e.g. \"amd64\".\n    :param cpus: The minimum number of CPUs to match.\n    :param memory: The minimum amount of RAM to match.\n    :param tags: The tags to match, as a sequence. Each tag may be\n        prefixed with a hyphen to denote that the given tag should NOT be\n        associated with a matched machine.\n>>> machine = client.machines.allocate(tags=(\"foo\", \"-bar\"))\n>>> print(machine.status)\nNodeStatus.COMMISSIONING\n>>> machine.deploy()\n>>> print(machine.status)\nNodeStatus.DEPLOYING\n\n\n\n\nAbort\n\n\nIf an action is performed on a machine and it needs to be aborted before it\nfinishes \nabort\n can be used.\n\n\n>>> machine.commission(wait=False)\n>>> machine.status\nNodeStatus.COMMISSIONING\n>>> machine.abort()\n>>> machine.status\nNodeStatus.NEW\n\n\n\n\nRescue mode\n\n\nBoot the machine into rescue mode and then exit.\n\n\n>>> machine.enter_rescue_mode()\n>>> machine.exit_rescue_mode()\n\n\n\n\nBroken & Fixed\n\n\nWhen a machine is identified as broken you can easily mark it broken and then\nfixed once the issue is resolved.\n\n\n>>> machine.mark_broken()\n>>> machine.status\nNodeStatus.BROKEN\n>>> machine.mark_fixed()\n>>> machine.status\nNodeStatus.READY\n\n\n\n\nOwner Data\n\n\nOwner data is extra information that you can set on a machine to hold some state information.\n\n\nNote:\n Once the machine is no longer in your control the information will be lost.\n\n\n>>> machine.owner_data\n{}\n>>> machine.owner_data['state'] = 'my-state-info'\n>>> machine.save()\n>>> machine.owner_data\n{'state': 'my-state-info'}\n>>> machine.release()\n>>> machine.owner_data\n{}\n\n\n\n\nPower Control\n\n\nThe power state of a machine can be controlled outside of deploy, releasing, and rescue mode. If you need to control the power of a BMC independently the \npower_on\n, \npower_off\n and \nquery_power_state\n can be of help.\n\n\n>>> machine.power_state\nPowerState.ON\n>>> machine.power_off()\n>>> machine.power_state\nPowerState.OFF\n>>> machine.power_on()\n>>> machine.power_state\nPowerState.ON\n>>> machine.query_power_state()\nPowerState.ON\n\n\n\n\nReset Configuration\n\n\nIt is possible to restore the machine back to exactly how it was after you completed commissioning. This is helpful when you have made a configuration that you no longer want or you want to start fresh.\n\n\n>>> machine.restore_default_configuration()\n>>> # Only restore networking.\n>>> machine.restore_networking_configuration()\n>>> # Only restore storage configuration.\n>>> machine.restore_storage_configuration()",
            "title": "Nodes"
        },
        {
            "location": "/client/nodes/index.html#read-nodes",
            "text": "Each node type exists on the client:  machines ,  devices , rack_controllers ,  region_controllers .  >>> client.machines.list()\n<Machines length=1 items=[<Machine hostname='wanted-falcon' system_id='ekgqwd'>]>\n>>> client.devices.list()\n<Devices length=0 items=[]>\n>>> client.rack_controllers.list()\n<RackControllers length=1 items=[<RackController hostname='maas-ctrl' system_id='efw3c4'>]>\n>>> client.region_controllers.list()\n<RegionControllers length=1 items=[<RegionController hostname='maas-ctrl' system_id='efw3c4'>]>  Easily iterate through the machines.  >>> for machine in client.machines.list():\n...     print(repr(machine))\n<Machine hostname='botswana' system_id='pncys4'>  Get a machine from its system_id.  >>> machine = client.machines.get(system_id=\"pncys4\")\n>>> machine\n<Machine hostname='botswana' system_id='pncys4'>  Machines \u2014 and devices, racks, and regions \u2014 have many useful\nattributes:  >>> machine.architecture\n'amd64/generic'\n>>> machine.cpus\n4  Don\u2019t forget to try using tab-completion \u2014 the objects have been\ndesigned to be particularly friendly for interactive use \u2014 or dir(machine)  to find out what other fields and methods are\navailable.",
            "title": "Read nodes"
        },
        {
            "location": "/client/nodes/index.html#create-nodes",
            "text": "Create a machine in MAAS. The architecture, MAC addresses, and power type are\nrequired fields.  >>> machine = client.machines.create(\n...     \"amd64\", [\"00:11:22:33:44:55\", \"AA:BB:CC:DD:EE:FF\"], \"manual\")\n<Machine hostname='wanted-falcon' system_id='ekgqwd'>  Normally you need to pass in power parameter so MAAS can talk to the BMC.  >>> machine = client.machines.create(\n...     \"amd64\", [\"00:11:22:33:44:55\", \"AA:BB:CC:DD:EE:FF\"], \"ipmi\", {\n...         \"power_address\": \"10.245.0.10\",\n...         \"power_user\": \"root\",\n...         \"power_pass\": \"calvin\",\n...     })\n>>> machine\n<Machine hostname='wanted-falcon' system_id='ekgqwd'>\n>>> machine.status\n<NodeStatus.COMMISSIONING: 1>",
            "title": "Create nodes"
        },
        {
            "location": "/client/nodes/index.html#updating-nodes",
            "text": "Updating a machine is as simple as modifying the attribute and saving.  >>> machine.hostname = 'my-machine'\n>>> machine.architecture = 'i386/generic'\n>>> machine.save()",
            "title": "Updating nodes"
        },
        {
            "location": "/client/nodes/index.html#deleting-nodes",
            "text": "Delete a machine is simple as calling delete on the machine object.  >>> machine.delete()",
            "title": "Deleting nodes"
        },
        {
            "location": "/client/nodes/index.html#commissioning-and-testing",
            "text": "Easily commission a machine and wait until it successfully completes. By\ndefault the  commission  method waits until commissioning succeeds.  >>> machine.commission()\n>>> machine.status\nNodeStatus.READY  A more advanced asyncio based script that runs commissioning with extra scripts\nand waits until all machines have successfully commissioned.  #!/usr/bin/env python3\n\nimport asyncio\n\nfrom maas.client import login\nfrom maas.client.enum import NodeStatus\nfrom maas.client.utils.async import asynchronous\n\n\n@asynchronous\nasync def commission_all_machines():\n    client = await login(\n        \"http://eucula.local:5240/MAAS/\",\n        username=\"gavin\", password=\"f00b4r\")\n\n    # Get all machines that are in the NEW status.\n    all_machines = await client.machines.list()\n    new_machines = [\n        machine\n        for machine in all_machines\n        if machine.status == NodeStatus.NEW\n    ]\n\n    # Run commissioning with a custom commissioning script on all new machines.\n    for machine in new_machines:\n        machine.commission(\n            commissioning_scripts=['clear_hardware_raid'], wait=False)\n\n    # Wait until all machines are ready.\n    failed_machines = []\n    completed_machines = []\n    while len(new_machines) > 0:\n        await asyncio.sleep(5)\n        for machine in list(new_machines):\n            await machine.refresh()\n            if machine.status in [\n                    NodeStatus.COMMISSIONING, NodeStatus.TESTING]:\n                # Machine is still commissioning or testing.\n                continue\n            elif machine.status == NodeStatus.READY:\n                # Machine is complete.\n                completed_machines.append(machine)\n                new_machines.remove(machine)\n            else:\n                # Machine has failed commissioning.\n                failed_machines.append(machine)\n                new_machines.remove(machine)\n\n    # Print message if any machines failed to commission.\n    if len(failed_machines) > 0:\n        for machine in failed_machines:\n            print(\"%s: transitioned to unexpected status - %s\" % (\n                machine.hostname, machine.status_name))\n    else:\n        print(\"Successfully commissioned %d machines.\" % len(\n            completed_machines))\n\n\ncommission_all_machines()",
            "title": "Commissioning and testing"
        },
        {
            "location": "/client/nodes/index.html#allocating-and-deploying",
            "text": ">>> help(client.machines.allocate)\nHelp on method allocate in module maas.client.viscera.machines:\n\nallocate(\n    *, hostname:str=None, architecture:str=None, cpus:int=None,\n    memory:float=None, tags:typing.Sequence=None)\n  method of maas.client.viscera.machines.MachinesType instance\n    Allocate a machine.\n\n    :param hostname: The hostname to match.\n    :param architecture: The architecture to match, e.g. \"amd64\".\n    :param cpus: The minimum number of CPUs to match.\n    :param memory: The minimum amount of RAM to match.\n    :param tags: The tags to match, as a sequence. Each tag may be\n        prefixed with a hyphen to denote that the given tag should NOT be\n        associated with a matched machine.\n>>> machine = client.machines.allocate(tags=(\"foo\", \"-bar\"))\n>>> print(machine.status)\nNodeStatus.COMMISSIONING\n>>> machine.deploy()\n>>> print(machine.status)\nNodeStatus.DEPLOYING",
            "title": "Allocating and deploying"
        },
        {
            "location": "/client/nodes/index.html#abort",
            "text": "If an action is performed on a machine and it needs to be aborted before it\nfinishes  abort  can be used.  >>> machine.commission(wait=False)\n>>> machine.status\nNodeStatus.COMMISSIONING\n>>> machine.abort()\n>>> machine.status\nNodeStatus.NEW",
            "title": "Abort"
        },
        {
            "location": "/client/nodes/index.html#rescue-mode",
            "text": "Boot the machine into rescue mode and then exit.  >>> machine.enter_rescue_mode()\n>>> machine.exit_rescue_mode()",
            "title": "Rescue mode"
        },
        {
            "location": "/client/nodes/index.html#broken-fixed",
            "text": "When a machine is identified as broken you can easily mark it broken and then\nfixed once the issue is resolved.  >>> machine.mark_broken()\n>>> machine.status\nNodeStatus.BROKEN\n>>> machine.mark_fixed()\n>>> machine.status\nNodeStatus.READY",
            "title": "Broken &amp; Fixed"
        },
        {
            "location": "/client/nodes/index.html#owner-data",
            "text": "Owner data is extra information that you can set on a machine to hold some state information.  Note:  Once the machine is no longer in your control the information will be lost.  >>> machine.owner_data\n{}\n>>> machine.owner_data['state'] = 'my-state-info'\n>>> machine.save()\n>>> machine.owner_data\n{'state': 'my-state-info'}\n>>> machine.release()\n>>> machine.owner_data\n{}",
            "title": "Owner Data"
        },
        {
            "location": "/client/nodes/index.html#power-control",
            "text": "The power state of a machine can be controlled outside of deploy, releasing, and rescue mode. If you need to control the power of a BMC independently the  power_on ,  power_off  and  query_power_state  can be of help.  >>> machine.power_state\nPowerState.ON\n>>> machine.power_off()\n>>> machine.power_state\nPowerState.OFF\n>>> machine.power_on()\n>>> machine.power_state\nPowerState.ON\n>>> machine.query_power_state()\nPowerState.ON",
            "title": "Power Control"
        },
        {
            "location": "/client/nodes/index.html#reset-configuration",
            "text": "It is possible to restore the machine back to exactly how it was after you completed commissioning. This is helpful when you have made a configuration that you no longer want or you want to start fresh.  >>> machine.restore_default_configuration()\n>>> # Only restore networking.\n>>> machine.restore_networking_configuration()\n>>> # Only restore storage configuration.\n>>> machine.restore_storage_configuration()",
            "title": "Reset Configuration"
        },
        {
            "location": "/client/networking/index.html",
            "text": "Fabrics, VLANs, Subnets, Spaces, IP Ranges, Static Routes\n\n\n\nGiven a \nClient\n instance bound to your MAAS server, you can\ninterrogate your entire networking configuration.\n\n\nRead networking\n\n\nfabrics\n, \nsubnets\n, \nspaces\n, \nip_ranges\n, and \nstatic_routes\n is\nexposed directly on your \nClient\n instance. \nvlans\n are nested under each\n\nFabric\n.\n\n\n>>> fabrics = client.fabrics.list()\n>>> len(fabrics)\n1\n>>> default_fabric = fabrics.get_default()\n>>> default_fabric.name\n'fabric-0'\n>>> default_fabric.vlans\n<Vlans.Managed#Fabric length=1 items=[<Vlan name='untagged' vid=0>]>\n>>> for vlan in default_fabric.vlans:\n...     print(vlan)\n...\n<Vlan name='untagged' vid=0>\n>>>\n\n\n\n\nGet a specific subnet and view the \nVlan\n and \nFabric\n that it is\nassigned to. Going up the tree from \nVlan\n to \nFabric\n results in an\nunloaded \nFabric\n. Calling \nrefresh\n on \nFabric\n will load the object\nfrom MAAS.\n\n\n>>> vm_subnet = client.subnets.get('192.168.122.0/24')\n>>> vm_subnet.cidr\n'192.168.122.0/24'\n>>> vm_subnet.vlan\n<Vlan name='untagged' vid=0>\n>>> fabric = vm_subnet.vlan.fabric\n>>> fabric\n<Fabric id=20 (unloaded)>\n>>> fabric.refresh()\n>>> fabric.vlans\nTraceback (most recent call last):\n...\nObjectNotLoaded: cannot access attribute 'vlans' of object 'Fabric'\n>>> fabric.is_loaded\nFalse\n>>> fabric.refresh()\n>>> fabric.is_loaded\nTrue\n>>> fabric.vlans\n<Vlans.Managed#Fabric length=1 items=[<Vlan name='untagged' vid=0>]>\n\n\n\n\nAccess to \nspaces\n, \nip_ranges\n, and \nstatic_routes\n works similarly.\n\n\n>>> client.spaces.list()\n>>> client.ip_ranges.list()\n>>> client.static_routes.list()\n\n\n\n\nCreate fabric & vlan\n\n\nCreating a new fabric and vlan is done directly from each set of objects on\nthe \nClient\n respectively.\n\n\n>>> new_fabric = client.fabrics.create()\n>>> new_fabric.name\n'fabric-2'\n>>> new_vlan = new_fabric.vlans.create(20)\n>>> new_vlan\n<Vlan name='' vid=20>\n>>> new_vlan.fabric\n<Fabric id=2 (unloaded)>\n\n\n\n\nCreate subnet\n\n\nCreate a new subnet and assign it to an existing vlan.\n\n\n>>> new_subnet = client.subnets.create('192.168.128.0/24', new_vlan)\n>>> new_subnet.cidr\n'192.168.128.0/24'\n>>> new_subnet.vlan\n<Vlan name='' vid=20>\n\n\n\n\nUpdate subnet\n\n\nQuickly move the newly created subnet from vlan to default fabric\nuntagged vlan.\n\n\n>>> default_fabric = client.fabrics.get_default()\n>>> untagged = default_fabric.vlans.get_default()\n>>> new_subnet.vlan = untagged\n>>> new_subnet.save()\n>>> new_subnet.vlan\n<Vlan name='untagged' vid=0>\n\n\n\n\nDelete subnet\n\n\ndelete\n exists directly on the \nSubnet\n object so deletion is simple.\n\n\n>>> new_subnet.delete()\n>>>\n\n\n\n\nEnable DHCP\n\n\nCreate a new dynamic IP range and turn DHCP on the selected\nrack controller.\n\n\n>>> fabric = client.fabrics.get_default()\n>>> untagged = fabric.vlans.get_default()\n>>> new_range = client.ip_ranges.create(\n...     '192.168.122.100', '192.168.122.200', type=IPRangeType.DYNAMIC)\n>>> rack = client.rack_controllers.list()[0]\n>>> untagged.dhcp_on = True\n>>> untagged.primary_rack = rack\n>>> untagged.save()",
            "title": "Networking"
        },
        {
            "location": "/client/networking/index.html#read-networking",
            "text": "fabrics ,  subnets ,  spaces ,  ip_ranges , and  static_routes  is\nexposed directly on your  Client  instance.  vlans  are nested under each Fabric .  >>> fabrics = client.fabrics.list()\n>>> len(fabrics)\n1\n>>> default_fabric = fabrics.get_default()\n>>> default_fabric.name\n'fabric-0'\n>>> default_fabric.vlans\n<Vlans.Managed#Fabric length=1 items=[<Vlan name='untagged' vid=0>]>\n>>> for vlan in default_fabric.vlans:\n...     print(vlan)\n...\n<Vlan name='untagged' vid=0>\n>>>  Get a specific subnet and view the  Vlan  and  Fabric  that it is\nassigned to. Going up the tree from  Vlan  to  Fabric  results in an\nunloaded  Fabric . Calling  refresh  on  Fabric  will load the object\nfrom MAAS.  >>> vm_subnet = client.subnets.get('192.168.122.0/24')\n>>> vm_subnet.cidr\n'192.168.122.0/24'\n>>> vm_subnet.vlan\n<Vlan name='untagged' vid=0>\n>>> fabric = vm_subnet.vlan.fabric\n>>> fabric\n<Fabric id=20 (unloaded)>\n>>> fabric.refresh()\n>>> fabric.vlans\nTraceback (most recent call last):\n...\nObjectNotLoaded: cannot access attribute 'vlans' of object 'Fabric'\n>>> fabric.is_loaded\nFalse\n>>> fabric.refresh()\n>>> fabric.is_loaded\nTrue\n>>> fabric.vlans\n<Vlans.Managed#Fabric length=1 items=[<Vlan name='untagged' vid=0>]>  Access to  spaces ,  ip_ranges , and  static_routes  works similarly.  >>> client.spaces.list()\n>>> client.ip_ranges.list()\n>>> client.static_routes.list()",
            "title": "Read networking"
        },
        {
            "location": "/client/networking/index.html#create-fabric-vlan",
            "text": "Creating a new fabric and vlan is done directly from each set of objects on\nthe  Client  respectively.  >>> new_fabric = client.fabrics.create()\n>>> new_fabric.name\n'fabric-2'\n>>> new_vlan = new_fabric.vlans.create(20)\n>>> new_vlan\n<Vlan name='' vid=20>\n>>> new_vlan.fabric\n<Fabric id=2 (unloaded)>",
            "title": "Create fabric &amp; vlan"
        },
        {
            "location": "/client/networking/index.html#create-subnet",
            "text": "Create a new subnet and assign it to an existing vlan.  >>> new_subnet = client.subnets.create('192.168.128.0/24', new_vlan)\n>>> new_subnet.cidr\n'192.168.128.0/24'\n>>> new_subnet.vlan\n<Vlan name='' vid=20>",
            "title": "Create subnet"
        },
        {
            "location": "/client/networking/index.html#update-subnet",
            "text": "Quickly move the newly created subnet from vlan to default fabric\nuntagged vlan.  >>> default_fabric = client.fabrics.get_default()\n>>> untagged = default_fabric.vlans.get_default()\n>>> new_subnet.vlan = untagged\n>>> new_subnet.save()\n>>> new_subnet.vlan\n<Vlan name='untagged' vid=0>",
            "title": "Update subnet"
        },
        {
            "location": "/client/networking/index.html#delete-subnet",
            "text": "delete  exists directly on the  Subnet  object so deletion is simple.  >>> new_subnet.delete()\n>>>",
            "title": "Delete subnet"
        },
        {
            "location": "/client/networking/index.html#enable-dhcp",
            "text": "Create a new dynamic IP range and turn DHCP on the selected\nrack controller.  >>> fabric = client.fabrics.get_default()\n>>> untagged = fabric.vlans.get_default()\n>>> new_range = client.ip_ranges.create(\n...     '192.168.122.100', '192.168.122.200', type=IPRangeType.DYNAMIC)\n>>> rack = client.rack_controllers.list()[0]\n>>> untagged.dhcp_on = True\n>>> untagged.primary_rack = rack\n>>> untagged.save()",
            "title": "Enable DHCP"
        },
        {
            "location": "/client/interfaces/index.html",
            "text": "Interfaces\n\n\n\nGiven an \nNode\n instance bound to your MAAS server, you can\nview and modify its interface configuration. This applies to all \nMachine\n,\n\nDevice\n, \nRackController\n, and \nRegionController\n.\n\n\nRead interfaces\n\n\nAll \nNode\n objects have an \ninterfaces\n property that provide a sequence of\nall \nInterface\n\u2018s on the \nNode\n.\n\n\n>>> machine.interfaces\n<Interfaces.Managed#Machine length=1 items=[\n  <Interface mac_address='52:54:00:b4:7e:8c' name='ens3'\n    type=<InterfaceType.PHYSICAL: 'physical'>>]>\n>>> machine.boot_interface\n<Interface mac_address='52:54:00:b4:7e:8c' name='ens3'\n  type=<InterfaceType.PHYSICAL: 'physical'>>\n\n\n\n\nOn bond, VLAN, and bridge interfaces you can get the parents that make the\ninterface. You can also go the other direction and view the children interfaces\nthat are using this interface.\n\n\nNote:\n Parent and children objects are unloaded so they must be loaded to\naccess the properties of the object.\n\n\n>>> bond.parents\n<Interfaces.Managed#Interface length=2 items=[\n  <Interface name='ens3'\n    node=<Node system_id='yr7fym' (unloaded)> (unloaded)>,\n  <Interface name='ens4'\n    node=<Node system_id='yr7fym' (unloaded)> (unloaded)>,\n  ]>\n>>> ens3 = bond.parents[0]\n>>> ens3.loaded\nFalse\n>>> ens3.refresh()\n>>> ens3.type\n<InterfaceType.PHYSICAL: 'physical'>\n>>> ens3.children\n<Interfaces.Managed#Interface length=1 items=[\n  <Interface name='bond0'\n    node=<Node system_id='yr7fym' (unloaded)> (unloaded)>,\n  ]>\n\n\n\n\nGet interface by name\n\n\nThe \ninterfaces\n property on \nNode\n gives you access to all interfaces on\nthe node. Sometimes you want to access the interface objects by name.\n\nby_name\n and \nget_by_name\n are helpers on \nInterfaces\n that help.\n\n\n>>> machine.interfaces.by_name\n{'bond0': <Interface mac_address='52:54:00:b4:7e:8c'\n    name='bond0' type=<InterfaceType.BOND: 'bond'>>,\n 'ens3': <Interface mac_address='52:54:00:b4:7e:8c'\n     name='ens3' type=<InterfaceType.PHYSICAL: 'physical'>>,\n 'ens8': <Interface mac_address='52:54:00:11:f3:d2'\n    name='ens8' type=<InterfaceType.PHYSICAL: 'physical'>>}\n>>> bond = machine.interfaces.get_by_name('bond0')\n>>> bond\n<Interface mac_address='52:54:00:b4:7e:8c'\n    name='bond0' type=<InterfaceType.BOND: 'bond'>>\n\n\n\n\nRead IP configuration\n\n\nEvery \nInterface\n has a \nlinks\n property that provides all the IP\ninformation on how the interface is configured.\n\n\n>>> bond.links\n<InterfaceLinks.Managed#Interface length=1 items=[\n  <InterfaceLink ip_address=None mode=<LinkMode.AUTO: 'auto'>\n    subnet=<Subnet cidr='192.168.122.0/24' name='192.168.122.0/24'\n      vlan=<Vlan name='untagged' vid=0>>>]>\n\n\n\n\nCreate physical\n\n\nCreation of interfaces is done directly on the \ninterfaces\n property of a\n\nNode\n. Physical interface is the default type for the \ncreate\n method so\nonly \nmac_address\n is required.\n\n\n>>> new_phy = machine.interfaces.create(mac_address=\"00:11:22:aa:bb:cc\")\n>>> new_phy\n<Interface mac_address='00:11:22:aa:bb:cc' name='eth0'\n  type=<InterfaceType.PHYSICAL: 'physical'>>\n\n\n\n\nBy default the interface is created disconnected. To create it the interface\nwith it connected to a VLAN pass the \nvlan\n parameter.\n\n\n>>> default_vlan = client.fabrics.get_default().vlans.get_default()\n>>> new_phy = machine.interfaces.create(\n...    mac_address=\"00:11:22:aa:bb:cc\", vlan=default_vlan)\n>>> new_phy\n<Interface mac_address='00:11:22:aa:bb:cc' name='eth0'\n  type=<InterfaceType.PHYSICAL: 'physical'>>\n>>> new_phy.vlan\n<Vlan name='untagged' vid=0>\n\n\n\n\nCreate bond\n\n\nBond creation is the same as creating a physical interface but an\n\nInterfaceType\n is provided with options specific for a bond.\n\n\n>>> new_bond = machine.interfaces.create(\n...    InterfaceType.BOND, name='bond0', parents=machine.interfaces,\n...    bond_mode='802.3ad')\n>>> new_bond\n<Interface mac_address='52:54:00:b4:7e:8c' name='bond0'\n  type=<InterfaceType.BOND: 'bond'>>\n>>> new_bond.params\n{'bond_downdelay': 0,\n 'bond_lacp_rate': 'slow',\n 'bond_miimon': 100,\n 'bond_mode': '802.3ad',\n 'bond_updelay': 0,\n 'bond_xmit_hash_policy': 'layer2'}\n\n\n\n\nCreate vlan\n\n\nVLAN creation only requires a single parent and a tagged VLAN to connect\nthe interface to.\n\n\n>>> default_fabric = client.fabrics.get_default()\n>>> vlan_10 = default_fabric.vlans.create(10)\n>>> vlan_nic = machine.interfaces.create(\n...     InterfaceType.VLAN, parent=new_bond, vlan=vlan_10)\n>>> vlan_nic\n<Interface mac_address='52:54:00:b4:7e:8c' name='bond0.10'\n  type=<InterfaceType.VLAN: 'vlan'>>\n\n\n\n\nCreate bridge\n\n\nBridge creation only requires the name and parent interface you want the\nbridge to be created on.\n\n\n>>> bridge_nic = machine.interfaces.create(\n...     InterfaceType.BRIDGE, name='br0', parent=vlan_nic)\n>>> bridge_nic\n<Interface mac_address='52:54:00:b4:7e:8c' name='br0'\n  type=<InterfaceType.BRIDGE: 'bridge'>>\n\n\n\n\nUpdate interface\n\n\nTo update an interface just changing the properties of the interface and\ncalling \nsave\n is all that is required.\n\n\n>>> new_bond.name = 'my-bond'\n>>> new_bond.params['bond_mode'] = 'active-backup'\n>>> new_bond.save()\n\n\n\n\nChange IP configuration\n\n\nTo adjust the IP configuration on a specific interface \ncreate\n on the\n\nlinks\n property and \ndelete\n on the \nInterfaceLink\n can be used.\n\n\n>>> new_bond.links.create(LinkMode.AUTO, subnet=subnet)\n<InterfaceLink ip_address=None mode=<LinkMode.AUTO: 'auto'>\n  subnet=<Subnet cidr='192.168.122.0/24' name='192.168.122.0/24'\n    vlan=<Vlan name='untagged' vid=0>>>\n>>> new_bond.links[-1].delete()\n>>> new_bond.links.create(\n...     LinkMode.STATIC, subnet=subnet, ip_address='192.168.122.1')\n<InterfaceLink ip_address='192.168.122.10' mode=<LinkMode.STATIC: 'static'>\n  subnet=<Subnet cidr='192.168.122.0/24' name='192.168.122.0/24'\n    vlan=<Vlan name='untagged' vid=0>>>\n>>> new_bond.links[-1].delete()\n\n\n\n\nDisconnect interface\n\n\nTo completely mark an interface as disconnected and remove all configuration\nthe \ndisconnect\n call makes this easy.\n\n\n>>> new_bond.disconnect()\n\n\n\n\nDelete interface\n\n\ndelete\n exists directly on the \nInterface\n object so deletion is simple.\n\n\n>>> new_bond.delete()",
            "title": "Interfaces"
        },
        {
            "location": "/client/interfaces/index.html#read-interfaces",
            "text": "All  Node  objects have an  interfaces  property that provide a sequence of\nall  Interface \u2018s on the  Node .  >>> machine.interfaces\n<Interfaces.Managed#Machine length=1 items=[\n  <Interface mac_address='52:54:00:b4:7e:8c' name='ens3'\n    type=<InterfaceType.PHYSICAL: 'physical'>>]>\n>>> machine.boot_interface\n<Interface mac_address='52:54:00:b4:7e:8c' name='ens3'\n  type=<InterfaceType.PHYSICAL: 'physical'>>  On bond, VLAN, and bridge interfaces you can get the parents that make the\ninterface. You can also go the other direction and view the children interfaces\nthat are using this interface.  Note:  Parent and children objects are unloaded so they must be loaded to\naccess the properties of the object.  >>> bond.parents\n<Interfaces.Managed#Interface length=2 items=[\n  <Interface name='ens3'\n    node=<Node system_id='yr7fym' (unloaded)> (unloaded)>,\n  <Interface name='ens4'\n    node=<Node system_id='yr7fym' (unloaded)> (unloaded)>,\n  ]>\n>>> ens3 = bond.parents[0]\n>>> ens3.loaded\nFalse\n>>> ens3.refresh()\n>>> ens3.type\n<InterfaceType.PHYSICAL: 'physical'>\n>>> ens3.children\n<Interfaces.Managed#Interface length=1 items=[\n  <Interface name='bond0'\n    node=<Node system_id='yr7fym' (unloaded)> (unloaded)>,\n  ]>",
            "title": "Read interfaces"
        },
        {
            "location": "/client/interfaces/index.html#get-interface-by-name",
            "text": "The  interfaces  property on  Node  gives you access to all interfaces on\nthe node. Sometimes you want to access the interface objects by name. by_name  and  get_by_name  are helpers on  Interfaces  that help.  >>> machine.interfaces.by_name\n{'bond0': <Interface mac_address='52:54:00:b4:7e:8c'\n    name='bond0' type=<InterfaceType.BOND: 'bond'>>,\n 'ens3': <Interface mac_address='52:54:00:b4:7e:8c'\n     name='ens3' type=<InterfaceType.PHYSICAL: 'physical'>>,\n 'ens8': <Interface mac_address='52:54:00:11:f3:d2'\n    name='ens8' type=<InterfaceType.PHYSICAL: 'physical'>>}\n>>> bond = machine.interfaces.get_by_name('bond0')\n>>> bond\n<Interface mac_address='52:54:00:b4:7e:8c'\n    name='bond0' type=<InterfaceType.BOND: 'bond'>>",
            "title": "Get interface by name"
        },
        {
            "location": "/client/interfaces/index.html#read-ip-configuration",
            "text": "Every  Interface  has a  links  property that provides all the IP\ninformation on how the interface is configured.  >>> bond.links\n<InterfaceLinks.Managed#Interface length=1 items=[\n  <InterfaceLink ip_address=None mode=<LinkMode.AUTO: 'auto'>\n    subnet=<Subnet cidr='192.168.122.0/24' name='192.168.122.0/24'\n      vlan=<Vlan name='untagged' vid=0>>>]>",
            "title": "Read IP configuration"
        },
        {
            "location": "/client/interfaces/index.html#create-physical",
            "text": "Creation of interfaces is done directly on the  interfaces  property of a Node . Physical interface is the default type for the  create  method so\nonly  mac_address  is required.  >>> new_phy = machine.interfaces.create(mac_address=\"00:11:22:aa:bb:cc\")\n>>> new_phy\n<Interface mac_address='00:11:22:aa:bb:cc' name='eth0'\n  type=<InterfaceType.PHYSICAL: 'physical'>>  By default the interface is created disconnected. To create it the interface\nwith it connected to a VLAN pass the  vlan  parameter.  >>> default_vlan = client.fabrics.get_default().vlans.get_default()\n>>> new_phy = machine.interfaces.create(\n...    mac_address=\"00:11:22:aa:bb:cc\", vlan=default_vlan)\n>>> new_phy\n<Interface mac_address='00:11:22:aa:bb:cc' name='eth0'\n  type=<InterfaceType.PHYSICAL: 'physical'>>\n>>> new_phy.vlan\n<Vlan name='untagged' vid=0>",
            "title": "Create physical"
        },
        {
            "location": "/client/interfaces/index.html#create-bond",
            "text": "Bond creation is the same as creating a physical interface but an InterfaceType  is provided with options specific for a bond.  >>> new_bond = machine.interfaces.create(\n...    InterfaceType.BOND, name='bond0', parents=machine.interfaces,\n...    bond_mode='802.3ad')\n>>> new_bond\n<Interface mac_address='52:54:00:b4:7e:8c' name='bond0'\n  type=<InterfaceType.BOND: 'bond'>>\n>>> new_bond.params\n{'bond_downdelay': 0,\n 'bond_lacp_rate': 'slow',\n 'bond_miimon': 100,\n 'bond_mode': '802.3ad',\n 'bond_updelay': 0,\n 'bond_xmit_hash_policy': 'layer2'}",
            "title": "Create bond"
        },
        {
            "location": "/client/interfaces/index.html#create-vlan",
            "text": "VLAN creation only requires a single parent and a tagged VLAN to connect\nthe interface to.  >>> default_fabric = client.fabrics.get_default()\n>>> vlan_10 = default_fabric.vlans.create(10)\n>>> vlan_nic = machine.interfaces.create(\n...     InterfaceType.VLAN, parent=new_bond, vlan=vlan_10)\n>>> vlan_nic\n<Interface mac_address='52:54:00:b4:7e:8c' name='bond0.10'\n  type=<InterfaceType.VLAN: 'vlan'>>",
            "title": "Create vlan"
        },
        {
            "location": "/client/interfaces/index.html#create-bridge",
            "text": "Bridge creation only requires the name and parent interface you want the\nbridge to be created on.  >>> bridge_nic = machine.interfaces.create(\n...     InterfaceType.BRIDGE, name='br0', parent=vlan_nic)\n>>> bridge_nic\n<Interface mac_address='52:54:00:b4:7e:8c' name='br0'\n  type=<InterfaceType.BRIDGE: 'bridge'>>",
            "title": "Create bridge"
        },
        {
            "location": "/client/interfaces/index.html#update-interface",
            "text": "To update an interface just changing the properties of the interface and\ncalling  save  is all that is required.  >>> new_bond.name = 'my-bond'\n>>> new_bond.params['bond_mode'] = 'active-backup'\n>>> new_bond.save()",
            "title": "Update interface"
        },
        {
            "location": "/client/interfaces/index.html#change-ip-configuration",
            "text": "To adjust the IP configuration on a specific interface  create  on the links  property and  delete  on the  InterfaceLink  can be used.  >>> new_bond.links.create(LinkMode.AUTO, subnet=subnet)\n<InterfaceLink ip_address=None mode=<LinkMode.AUTO: 'auto'>\n  subnet=<Subnet cidr='192.168.122.0/24' name='192.168.122.0/24'\n    vlan=<Vlan name='untagged' vid=0>>>\n>>> new_bond.links[-1].delete()\n>>> new_bond.links.create(\n...     LinkMode.STATIC, subnet=subnet, ip_address='192.168.122.1')\n<InterfaceLink ip_address='192.168.122.10' mode=<LinkMode.STATIC: 'static'>\n  subnet=<Subnet cidr='192.168.122.0/24' name='192.168.122.0/24'\n    vlan=<Vlan name='untagged' vid=0>>>\n>>> new_bond.links[-1].delete()",
            "title": "Change IP configuration"
        },
        {
            "location": "/client/interfaces/index.html#disconnect-interface",
            "text": "To completely mark an interface as disconnected and remove all configuration\nthe  disconnect  call makes this easy.  >>> new_bond.disconnect()",
            "title": "Disconnect interface"
        },
        {
            "location": "/client/interfaces/index.html#delete-interface",
            "text": "delete  exists directly on the  Interface  object so deletion is simple.  >>> new_bond.delete()",
            "title": "Delete interface"
        },
        {
            "location": "/client/events/index.html",
            "text": "Events\n\n\n\nEvents are similar to other client objects\u2026 but a little different\ntoo. The only way to get events is by the \nquery\n method:\n\n\n>>> events = client.events.query()\n\n\n\n\nThis accepts a plethora of optional arguments to narrow down the results:\n\n\n>>> events = client.events.query(hostnames={\"foo\", \"bar\"})\n>>> events = client.events.query(domains={\"example.com\", \"maas.io\"})\n>>> events = client.events.query(zones=[\"red\", \"blue\"])\n>>> events = client.events.query(macs=(\"12:34:56:78:90:ab\", ))\n>>> events = client.events.query(system_ids=\u2026)\n>>> events = client.events.query(agent_name=\u2026)\n>>> events = client.events.query(level=\u2026)\n>>> events = client.events.query(after=\u2026, limit=\u2026)\n\n\n\n\nThese arguments can be combined to narrow the results even further.\n\n\nThe \nlevel\n argument is a little special. It\u2019s a choice from a\npredefined set. For convenience, those choices are available in\n\nclient.events\n:\n\n\n>>> events = client.events.query(level=client.events.ERROR)\n\n\n\n\nbut you can also pass in the string \u201cERROR\u201d or the number 40.",
            "title": "Events"
        },
        {
            "location": "/client/other/index.html",
            "text": "Other objects\n\n\n\nThere are several other object types available via the client API. Use\n\ndir()\n and tab-completion to dig around interactively, or read the\ncode; we\u2019ve tried to keep it readable.\n\n\nFiles, users, tags\n\n\nSimilarly to nodes, these sets of objects can be fetched:\n\n\n>>> tags = client.tags.list()\n>>> files = client.files.list()\n>>> users = client.users.list()\n\n\n\n\nWhen reading from collections, as above, the returned object is\nlist-like:\n\n\n>>> len(tags)\n5\n>>> tags[3]\n<Tag comment=\"Foo's stuff\" definition='' kernel_opts='' name='foo'>\n>>> tags[3] in tags\nTrue\n>>> not_foo = [tag for tag in tags if tag.name != 'foo']\n>>> len(not_foo)\n4\n\n\n\n\nHowever, it\u2019s read-only:\n\n\n>>> tags[0] = \"bob\"\n\u2026\nTypeError: 'Tags' object does not support item assignment",
            "title": "Others"
        },
        {
            "location": "/client/other/index.html#files-users-tags",
            "text": "Similarly to nodes, these sets of objects can be fetched:  >>> tags = client.tags.list()\n>>> files = client.files.list()\n>>> users = client.users.list()  When reading from collections, as above, the returned object is\nlist-like:  >>> len(tags)\n5\n>>> tags[3]\n<Tag comment=\"Foo's stuff\" definition='' kernel_opts='' name='foo'>\n>>> tags[3] in tags\nTrue\n>>> not_foo = [tag for tag in tags if tag.name != 'foo']\n>>> len(not_foo)\n4  However, it\u2019s read-only:  >>> tags[0] = \"bob\"\n\u2026\nTypeError: 'Tags' object does not support item assignment",
            "title": "Files, users, tags"
        },
        {
            "location": "/development/releasing/index.html",
            "text": "Releasing a new version of \npython-libmaas\n\n\n\n\n\n\n\nClean and test:\n\n\nmake clean\nmake test\n\n\n\n\n\n\n\n\nIf you didn\u2019t \nmake clean\n just now, do it! Without it the \nPyPI\n\n   uploads may be built incorrectly.\n\n\n\n\n\n\nBump version in \nsetup.py\n, merge to \nmaster\n.\n\n\n\n\n\n\nTag \nmaster\n:\n\n\ngit tag --sign ${version} --message \"Release ${version}.\"\ngit push origin --tags\n\n\n\n\n\n\n\n\nBuild and push docs to \nGitHub\n:\n\n\nmake docs-to-github\n\n\n\n\n\n\n\n\nBuild and push source and wheel to \nPyPI\n:\n\n\nmake upload",
            "title": "Release checklist"
        },
        {
            "location": "/development/adding-an-object/index.html",
            "text": "Adding a new object type\n\n\n\nThis will show the process by which we can add support for \nSpace\n\nobjects, but it should be roughly applicable to other objects.\n\n\n\n\nSkeleton\n\n\nStart by creating a new file in \nviscera\n. Following the example of\nexisting objects, name it \nmaas/client/viscera/spaces.py\n (i.e. plural).\n\n\n\n\nWhy \nviscera\n? The client we recommend for users is a fa\u00e7ade of\n\nviscera\n, allowing us to present a simplified interface which mingles\nset-like operations with individual ones. This is friendlier to a new\ndeveloper, but \nviscera\n itself keeps the two separate for cleanliness\nof implementation.\n\n\n\n\nCreate a skeleton for \nSpace\n and \nSpaces\n:\n\n\n\"\"\"Objects for spaces.\"\"\"\n\n__all__ = [\n    \"Space\",\n    \"Spaces\",\n]\n\nfrom . import (\n    Object,\n    ObjectSet,\n    ObjectType,\n)\n\n\nclass SpacesType(ObjectType):\n    \"\"\"Metaclass for `Spaces`.\"\"\"\n\n\nclass Spaces(ObjectSet, metaclass=SpacesType):\n    \"\"\"The set of spaces.\"\"\"\n\n\nclass SpaceType(ObjectType):\n    \"\"\"Metaclass for `Space`.\"\"\"\n\n\nclass Space(Object, metaclass=SpaceType):\n    \"\"\"A space.\"\"\"\n\n\n\n\nWe create explicit type classes as a place to put class-specific\ninformation and methods. Most interestingly, methods created on the type\nclasses are \nclass\n methods on instances of the type. For example:\n\n\n>>> class FooType(type):\n...    def hello(cls):\n...        return \"Hello, %s\" % cls\n\n>>> class Foo(metaclass=FooType):\n...    def goodbye(self):\n...        return \"Goodbye, %s\" % self\n\n>>> Foo.hello()\n\"Hello, <class '__main__.Foo'>\"\n\n>>> foo = Foo()\n>>> foo.goodbye()\n'Goodbye, <__main__.Foo object at ...>'\n\n\n\n\nThe difference between using \n@classmethod\n and this is that those class\nmethods are not available on instances:\n\n\n>>> foo.hello()\nTraceback (most recent call last):\n...\nAttributeError: 'Foo' object has no attribute 'hello'\n\n\n\n\nThis keeps the namespace uncluttered, which is good for interactive,\nexploratory development, and it keeps code cleaner too: a class method\n\nmust\n be called via the class.\n\n\nGetting this into the default \nOrigin\n\n\nIn \nmaas/client/viscera/__init__.py\n is the default \nOrigin\n class. This\nloads object definitions, like those above, and \nbinds\n them to a\nparticular server. More about that later, but for now you need to add\n\n\".spaces\"\n to \nOrigin.__init__\n:\n\n\n             \".files\",\n             \".maas\",\n             \".machines\",\n+            \".spaces\",\n             \".tags\",\n             \".users\",\n             \".version\",\n\n\n\n\nBasic accessors\n\n\nAdd the following basic accessor method to \nSpacesType\n:\n\n\nclass SpacesType(ObjectType):\n\n    async def read(cls):\n        data = await cls._handler.read()\n        return cls(map(cls._object, data))\n\n\n\n\nLet\u2019s start working against a real MAAS server:\n\n\n$ bin/maas login my-server http://.../MAAS username p4ssw0rd\n$ bin/pip install -IU IPython  # Don't leave home without it.\n$ bin/maas shell --viscera\nWelcome to the MAAS shell.\n\nPredefined objects:\n\n  client:\n    A pre-canned client for 'madagascar'.\n\n  origin:\n    A pre-canned `viscera` origin for 'madagascar'.\n\n\n\n\n>>> origin.Spaces.read()\n<Spaces length=2 items=[<Space>, <Space>]>\n\n>>> origin.Spaces._handler\n<Handler Spaces http://.../MAAS/api/2.0/spaces/>\n\n>>> origin.Spaces._origin\n<maas.client.viscera.Origin at ...>\n\n\n\n\nThe \n_handler\n attribute is the \nbones\n handler for spaces. We named the\nclass \u201cSpaces\u201d and \nOrigin\n paired that up with the \nbones\n handler of\nthe same name. This let us call the lower-level \nread()\n method. Try\ncalling it now:\n\n\n>>> origin.Spaces._handler.read()\n[{'id': 0,\n  'name': 'space-0',\n  'resource_uri': '/MAAS/api/2.0/spaces/0/',\n  'subnets': [],\n  'vlans': []},\n {'id': -1,\n  'name': 'undefined',\n  'resource_uri': '/MAAS/api/2.0/spaces/undefined/',\n  'subnets': [{'active_discovery': False,\n    'allow_proxy': True,\n    'cidr': '192.168.1.0/24',\n    'dns_servers': [],\n    'gateway_ip': '192.168.1.254',\n    'id': 1,\n    'managed': True,\n    'name': '192.168.1.0/24',\n    'rdns_mode': 2,\n    'resource_uri': '/MAAS/api/2.0/subnets/1/',\n    'space': 'undefined',\n    'vlan': {'dhcp_on': True,\n     'external_dhcp': None,\n     'fabric': 'fabric-0',\n     'fabric_id': 0,\n     'id': 5001,\n     'mtu': 1500,\n     'name': 'untagged',\n     'primary_rack': '4y3h7n',\n     'relay_vlan': None,\n     'resource_uri': '/MAAS/api/2.0/vlans/5001/',\n     'secondary_rack': 'xfaxgw',\n     'space': 'undefined',\n     'vid': 0}}],\n  'vlans': [{'dhcp_on': True,\n    'external_dhcp': None,\n    'fabric': 'fabric-0',\n    'fabric_id': 0,\n    'id': 5001,\n    'mtu': 1500,\n    'name': 'untagged',\n    'primary_rack': '4y3h7n',\n    'relay_vlan': None,\n    'resource_uri': '/MAAS/api/2.0/vlans/5001/',\n    'secondary_rack': 'xfaxgw',\n    'space': 'undefined',\n    'vid': 0}]}]\n\n\n\n\nLots of information!\n\n\n\n\nBy the way, many or most of the IO methods in \npython-libmaas\n can be\ncalled interactively or in a script and they work the same as any\nother synchronous or blocking call. Internally, however, they\u2019re all\nasynchronous. They\u2019re wrapped in such a way that, when called from\noutside of an \nasyncio\n event-loop, they block, but inside they work\njust the same as any other asynchronous call.\n\n\n\n\nLet\u2019s look at those \nSpace\n objects:\n\n\n>>> space, *_ = origin.Spaces.read()\n\n>>> dir(space)\n[..., '_data', '_handler', '_origin']\n\n>>> space._data\n{'id': 0,\n 'name': 'space-0',\n 'resource_uri': '/MAAS/api/2.0/spaces/0/',\n 'subnets': [],\n 'vlans': []}\n\n>>> space._handler\n<Handler Space http://madagascar.local:5240/MAAS/api/2.0/spaces/{space_id}/>\n\n>>> space._origin is origin\nTrue\n\n\n\n\nThe handler has been associated with this object type like it was for\n\nSpaces\n, so now\u2019s a good time to add another accessor method:\n\n\nclass SpaceType(ObjectType):\n\n    async def read(cls):\n        data = await cls._handler.read()\n        return cls(data)\n\n\n\n\nTry it out:\n\n\n>>> space = origin.Space.read(0)\n\n>>> space._data\n{'id': 0,\n 'name': 'space-0',\n 'resource_uri': '/MAAS/api/2.0/spaces/0/',\n 'subnets': [],\n 'vlans': []}\n\n\n\n\nGetting at the data\n\n\nWe don\u2019t want to work with that \n_data\n dictionary, we want attributes:\n\n\nclass Space(Object, metaclass=SpaceType):\n    \"\"\"A space.\"\"\"\n\n    id = ObjectField.Checked(\"id\", check(int), readonly=True)\n    name = ObjectField.Checked(\"name\", check(str), readonly=True)\n\n\n\n\nTry it out in the shell:\n\n\n>>> space.id, space, name\n(0, 'space-0')\n\n\n\n\nNext steps\n\n\nThat\u2019s enough for now, but there\u2019s plenty of ground yet to be covered:\n\n\n\n\n\n\nHow to work with the information about subnets and VLANs data that was\n  returned.\n\n\n\n\n\n\nHow to create, modify, and delete objects.\n\n\n\n\n\n\nHow to test all of this.",
            "title": "Adding an object"
        },
        {
            "location": "/development/adding-an-object/index.html#skeleton",
            "text": "Start by creating a new file in  viscera . Following the example of\nexisting objects, name it  maas/client/viscera/spaces.py  (i.e. plural).   Why  viscera ? The client we recommend for users is a fa\u00e7ade of viscera , allowing us to present a simplified interface which mingles\nset-like operations with individual ones. This is friendlier to a new\ndeveloper, but  viscera  itself keeps the two separate for cleanliness\nof implementation.   Create a skeleton for  Space  and  Spaces :  \"\"\"Objects for spaces.\"\"\"\n\n__all__ = [\n    \"Space\",\n    \"Spaces\",\n]\n\nfrom . import (\n    Object,\n    ObjectSet,\n    ObjectType,\n)\n\n\nclass SpacesType(ObjectType):\n    \"\"\"Metaclass for `Spaces`.\"\"\"\n\n\nclass Spaces(ObjectSet, metaclass=SpacesType):\n    \"\"\"The set of spaces.\"\"\"\n\n\nclass SpaceType(ObjectType):\n    \"\"\"Metaclass for `Space`.\"\"\"\n\n\nclass Space(Object, metaclass=SpaceType):\n    \"\"\"A space.\"\"\"  We create explicit type classes as a place to put class-specific\ninformation and methods. Most interestingly, methods created on the type\nclasses are  class  methods on instances of the type. For example:  >>> class FooType(type):\n...    def hello(cls):\n...        return \"Hello, %s\" % cls\n\n>>> class Foo(metaclass=FooType):\n...    def goodbye(self):\n...        return \"Goodbye, %s\" % self\n\n>>> Foo.hello()\n\"Hello, <class '__main__.Foo'>\"\n\n>>> foo = Foo()\n>>> foo.goodbye()\n'Goodbye, <__main__.Foo object at ...>'  The difference between using  @classmethod  and this is that those class\nmethods are not available on instances:  >>> foo.hello()\nTraceback (most recent call last):\n...\nAttributeError: 'Foo' object has no attribute 'hello'  This keeps the namespace uncluttered, which is good for interactive,\nexploratory development, and it keeps code cleaner too: a class method must  be called via the class.",
            "title": "Skeleton"
        },
        {
            "location": "/development/adding-an-object/index.html#getting-this-into-the-default-origin",
            "text": "In  maas/client/viscera/__init__.py  is the default  Origin  class. This\nloads object definitions, like those above, and  binds  them to a\nparticular server. More about that later, but for now you need to add \".spaces\"  to  Origin.__init__ :               \".files\",\n             \".maas\",\n             \".machines\",\n+            \".spaces\",\n             \".tags\",\n             \".users\",\n             \".version\",",
            "title": "Getting this into the default Origin"
        },
        {
            "location": "/development/adding-an-object/index.html#basic-accessors",
            "text": "Add the following basic accessor method to  SpacesType :  class SpacesType(ObjectType):\n\n    async def read(cls):\n        data = await cls._handler.read()\n        return cls(map(cls._object, data))  Let\u2019s start working against a real MAAS server:  $ bin/maas login my-server http://.../MAAS username p4ssw0rd\n$ bin/pip install -IU IPython  # Don't leave home without it.\n$ bin/maas shell --viscera\nWelcome to the MAAS shell.\n\nPredefined objects:\n\n  client:\n    A pre-canned client for 'madagascar'.\n\n  origin:\n    A pre-canned `viscera` origin for 'madagascar'.  >>> origin.Spaces.read()\n<Spaces length=2 items=[<Space>, <Space>]>\n\n>>> origin.Spaces._handler\n<Handler Spaces http://.../MAAS/api/2.0/spaces/>\n\n>>> origin.Spaces._origin\n<maas.client.viscera.Origin at ...>  The  _handler  attribute is the  bones  handler for spaces. We named the\nclass \u201cSpaces\u201d and  Origin  paired that up with the  bones  handler of\nthe same name. This let us call the lower-level  read()  method. Try\ncalling it now:  >>> origin.Spaces._handler.read()\n[{'id': 0,\n  'name': 'space-0',\n  'resource_uri': '/MAAS/api/2.0/spaces/0/',\n  'subnets': [],\n  'vlans': []},\n {'id': -1,\n  'name': 'undefined',\n  'resource_uri': '/MAAS/api/2.0/spaces/undefined/',\n  'subnets': [{'active_discovery': False,\n    'allow_proxy': True,\n    'cidr': '192.168.1.0/24',\n    'dns_servers': [],\n    'gateway_ip': '192.168.1.254',\n    'id': 1,\n    'managed': True,\n    'name': '192.168.1.0/24',\n    'rdns_mode': 2,\n    'resource_uri': '/MAAS/api/2.0/subnets/1/',\n    'space': 'undefined',\n    'vlan': {'dhcp_on': True,\n     'external_dhcp': None,\n     'fabric': 'fabric-0',\n     'fabric_id': 0,\n     'id': 5001,\n     'mtu': 1500,\n     'name': 'untagged',\n     'primary_rack': '4y3h7n',\n     'relay_vlan': None,\n     'resource_uri': '/MAAS/api/2.0/vlans/5001/',\n     'secondary_rack': 'xfaxgw',\n     'space': 'undefined',\n     'vid': 0}}],\n  'vlans': [{'dhcp_on': True,\n    'external_dhcp': None,\n    'fabric': 'fabric-0',\n    'fabric_id': 0,\n    'id': 5001,\n    'mtu': 1500,\n    'name': 'untagged',\n    'primary_rack': '4y3h7n',\n    'relay_vlan': None,\n    'resource_uri': '/MAAS/api/2.0/vlans/5001/',\n    'secondary_rack': 'xfaxgw',\n    'space': 'undefined',\n    'vid': 0}]}]  Lots of information!   By the way, many or most of the IO methods in  python-libmaas  can be\ncalled interactively or in a script and they work the same as any\nother synchronous or blocking call. Internally, however, they\u2019re all\nasynchronous. They\u2019re wrapped in such a way that, when called from\noutside of an  asyncio  event-loop, they block, but inside they work\njust the same as any other asynchronous call.   Let\u2019s look at those  Space  objects:  >>> space, *_ = origin.Spaces.read()\n\n>>> dir(space)\n[..., '_data', '_handler', '_origin']\n\n>>> space._data\n{'id': 0,\n 'name': 'space-0',\n 'resource_uri': '/MAAS/api/2.0/spaces/0/',\n 'subnets': [],\n 'vlans': []}\n\n>>> space._handler\n<Handler Space http://madagascar.local:5240/MAAS/api/2.0/spaces/{space_id}/>\n\n>>> space._origin is origin\nTrue  The handler has been associated with this object type like it was for Spaces , so now\u2019s a good time to add another accessor method:  class SpaceType(ObjectType):\n\n    async def read(cls):\n        data = await cls._handler.read()\n        return cls(data)  Try it out:  >>> space = origin.Space.read(0)\n\n>>> space._data\n{'id': 0,\n 'name': 'space-0',\n 'resource_uri': '/MAAS/api/2.0/spaces/0/',\n 'subnets': [],\n 'vlans': []}",
            "title": "Basic accessors"
        },
        {
            "location": "/development/adding-an-object/index.html#getting-at-the-data",
            "text": "We don\u2019t want to work with that  _data  dictionary, we want attributes:  class Space(Object, metaclass=SpaceType):\n    \"\"\"A space.\"\"\"\n\n    id = ObjectField.Checked(\"id\", check(int), readonly=True)\n    name = ObjectField.Checked(\"name\", check(str), readonly=True)  Try it out in the shell:  >>> space.id, space, name\n(0, 'space-0')",
            "title": "Getting at the data"
        },
        {
            "location": "/development/adding-an-object/index.html#next-steps",
            "text": "That\u2019s enough for now, but there\u2019s plenty of ground yet to be covered:    How to work with the information about subnets and VLANs data that was\n  returned.    How to create, modify, and delete objects.    How to test all of this.",
            "title": "Next steps"
        }
    ]
}